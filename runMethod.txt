/*
CIndividual* CGeneticAlgorithm::run(int times){

  bool succ = true;
  if(DEBUG) cout << "~ Run method\n" << endl;

  vector<CIndividual*> startPopulation = generatePopulation();
  int counter = 0;
  vector<CIndividual*> newPopulation;

  while(counter <= times){

    if(DEBUG) cout << "----------- ROUND " << counter << " ----------- " << endl;

    for(int i = 0; i < popSize; i++){
      startPopulation[i] -> fitness();
    }

    for(int i = 0; i < popSize/2; i++){
      vector<CIndividual*> children = crossIndividuals(startPopulation, succ);
        for(int j = 0; j < 2; j++){
          //  if(DEBUG) cout << "child added to the newPopulation\n" << endl;
            newPopulation.push_back(children[j]);
      }
    }

    cout << "newPopSize: " << newPopulation.size() << endl;

    for(int i = 0; i < newPopulation.size(); i++){
      newPopulation[i] -> mutate(mutProb);
      cout << "mutating new pop: " << endl;
    //  cout << "CHILD " << i << " GENOTYPE: ";
      newPopulation[i] -> printGenotype();
      cout << endl;
    }

    if(counter == times){
      sort(newPopulation.begin(), newPopulation.end(), ComparatorByFitness());
      return newPopulation.at(0);
    }

    cout << "before revaluing " << endl;

    for(int i = 0; i < newPopulation.size(); i++){
      cout << "CHILD " << i << " GENOTYPE: ";
      newPopulation[i] -> printGenotype();
    }
    revaluePopVectors(startPopulation, newPopulation);
    counter++;
  }

  sort(startPopulation.begin(), startPopulation.end(), ComparatorByFitness());
  return startPopulation.at(0);
}
*/